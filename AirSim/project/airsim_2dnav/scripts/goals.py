#!/usr/bin/env python
# license removed for brevity

# Author(s): Jayson Teh, Navaneeth Nair
# Documented by: Khai Hoe
# School: Monash University Malaysia
# Description: - Python source code that designates the goals for the PhysXCar in AirSim to move towards to. 
#                The PhysXCar will move through the goals sequentially. Each goal is assigned a goal type that 
#                describes the condition at that instant (whether it is a straight path/corner/etc)
#                A publisher publishes the current goal the car is moving towards

import rospy
import math
from geometry_msgs.msg import Vector3
from nav_msgs.msg import Odometry

class Goal:

    def __init__(self):
        # self.pose_seq = list()
        self.pose_seq = []
        self.goal_types = []
        self.goal_cnt = 0
        self.config = 9 # Select a config from a list of available configs. Each config take a different path around the map
        self.delay = 0.5 # Change startup delay here
        self.pub_goal = rospy.Publisher("/goals",Vector3,queue_size=1)

    def callback(self):
        goals = Vector3()
        rospy.loginfo("Loading goals for configuration: %d" %(self.config))
        while self.pub_goal.get_num_connections() == 0:
            rospy.sleep(0.05)
        # rospy.sleep(self.delay) # Keep this

        # Code below specifies the sequence of points the PhysXCar travel towards.
        # Each config uses a different path around the map
        # The goal types are described using numbers and are represented as follow
        # Moving forward
        #   0 - straight goal
        #   1 - goal before corner
        #   2 - corner goal
        #   3 - goal after corner
        #   4 - actual goal in the competition, its control is same as goal type 0
        #   5 - 3-point D
        #   7 - last goal, need to fully stop
        # Moving backward
        #   6 - straight goal
        #   8 - goal before corner
        #   9 - corner goal
        #   10 - goal after corner
        #  
        #   11- stop and go

        if self.config == 1:
            # Config 1 - Default (~1540 m, ~167s)
            points = [[-80, 0], [-135, 0.5], [-205, 0], [-212, -15], [-212, -30], [-212, -74], [-212,-122],[-197,-128],[-179,-128],[-135.5,-128],[-90,-128],[-84,-143],[-84,-153],[-84,-175],[-83,-195],[-79,-203],[-78, -207],[-84, -208], [-85, -205], [-85,-195],[-84,-128],[-84,-68],[-84,-58],[-99,-48],[-115,-48],[-135,-48],[-203, -48],[-212, -63],[-212, -78],[-212,-198],[-212, -241],[-212, -246],[-197, -256],[-182, -256],[-135.5, -256],[-80,-256],[-20, -256],[34.5, -256],[44, -241],[44, -220],[44, -198],[44, -138],[29, -128],[1,-128],[7.5, -133],[15, -128],[37, -128],[44, -110], [44,-95], [44.5, -65.5]]
            self.goal_types = [0,4,1,2,3,4,1,2,3,4,1,2,3,4,1,5,5,5,5,3,0,1,1,2,3,4,1,2,3,4,1,1,2,3,4,0,4,1,2,3,4,1,2,7,6,5,1,2,3,7] # 1-11
        elif self.config == 2:
            # Config 2 - Efficiency (< Distance, < Time), (~1520 m, ~162s)
            points = [[-80, 0], [-135, 0.5], [-205, 0], [-212, -15], [-212, -30], [-212, -74], [-212,-120],[-197,-128],[-179,-128],[-135.5,-128],[-94,-128],[-84,-143],[-84,-153],[-84,-198],[-84,-246],[-99,-256], [-114, -256], [-135.5, -256], [-202, -256], [-212, -241], [-212, -226],[-212,-198],[-212, -57],[-197, -48], [-183,-48], [-135,-48], [-94,-48], [-84,-63], [-84,-78], [-84,-120], [-69,-128], [-54,-128], [0,-128],[34, -128],[44, -110], [44,-95], [44, -90], [43,-79],[39,-71],[38, -67],[44, -66], [45, -69], [45,-77],[44, -198],[44, -246],[29, -256],[14,-256],[0, -256]]
            self.goal_types = [0,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,1,2,3,4,1,2,3,4,1,5,5,5,5,3,4,1,2,3,7] # 1-11
        elif self.config == 3:
            # Config 3 - Fastest (> Distance, <<< Time), (~1555 m, ~144s)
            points = [[-80, 0], [-135, 0], [-205, 0], [-212, -15], [-212, -30], [-212, -74], [-212,-120],[-197,-128],[-179,-128],[-135.5,-128], [-70, -128], [0,-128],[34, -128],[44, -110], [44,-95], [44, -79], [43,-75], [39, -67],[44, -66], [45, -69], [45,-77],[44, -198],[44, -246],[29, -256],[14,-256],[0, -256],[-70,-256], [-135.5, -256], [-202, -256], [-212, -241], [-212, -226],[-212,-198],[-212, -57],[-197, -48], [-183,-48], [-135,-48], [-94,-48], [-84,-63], [-84,-78], [-84,-198]]
            self.goal_types = [0,4,1,2,3,4,1,2,3,4,0,4,1,2,3,4,1,5,5,5,3,4,1,2,3,4,0,4,1,2,3,4,1,2,3,4,1,2,3,7] # 1-11)
        elif self.config == 4:
            # Config 4 - Shortest (<<< Distance, >> Time), (~1440 m, ~180s)
            points = [[-80, 0], [-135, 0.5], [-203, 0], [-212, -15], [-212, -30],[-212, -38],[-197, -48], [-183,-48], [-163,-48], [-141,-49],[-133,-51],[-130, -48],[-144, -48], [-153, -48],[-202, -48],[-212, -63],[-212, -78],[-212, -74], [-212,-120],[-197,-128],[-179,-128], [-163,-128], [-141,-129],[-133,-131],[-130, -128],[-143, -128],[-153, -128],[-202,-128], [-212,-143], [-212, -158], [-212,-198],[-212, -246],[-197, -256],[-182, -256],[-135.5, -256],[-94,-256],[-84,-241],[-84,-226],[-84.5,-198],[-84,-140],[-72,-128], [-55,-128], [0,-128],[34, -128],[44, -110], [44,-95], [44, -90], [43,-78],[39,-69],[38, -67],[44, -65], [45, -67], [44,-85],[44, -198],[44, -246],[29, -256],[14,-256],[0, -256]]
            self.goal_types = [0,4,1,2,3,1,2,3,4,1,5,5,5,3,1,2,3,4,1,2,3,4,1,5,5,5,3,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,5,5,5,5,3,4,1,2,3,7]
        elif self.config == 5:
            # Config 5 - Shortest (<<<< Distance, >> Time), (~1398 m, ~215s) (reverse, forward, reverse)
            points = [[-80, 0], [-135, 0.5], [-203, 0], [-212, -15], [-212, -30],[-212, -38],[-197, -48], [-183,-48], [-135,-48],[-202, -48],[-212, -63],[-212, -78],[-212, -74], [-212,-120],[-197,-128],[-179,-128], [-135,-128],[-202,-128], [-212,-143], [-212, -158], [-212,-198],[-212, -246],[-197, -256],[-182, -256],[-135.5, -256],[-94,-256],[-84,-241],[-84,-226],[-84.5,-198],[-84,-140],[-74,-128], [-59,-128], [0,-128],[34, -128],[44, -110], [44,-95], [44, -65],[44, -198],[44, -246],[29, -256],[14,-256],[0, -256],[0, -256]]
            self.goal_types = [0,4,1,2,3,1,2,3,4,8,9,10,6,8,9,10,6,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,6,8,9,10,6,7]
        elif self.config == 6:
            # Config 6 - Shortest (<<<< Distance, >>> Time), (~1400 m, ~200s) (reverse, forward, reverse) x2
            points = [[-80, 0], [-135, 0.5], [-203, 0], [-212, -15], [-212, -30],[-212, -38],[-197, -48], [-183,-48], [-135,-48],[-199, -48],[-212, -65],[-212, -78],[-212, -74], [-212,-116],[-197,-128],[-179,-128], [-135,-128],[-202,-128], [-212,-143], [-212, -158], [-212,-198],[-212, -246],[-197, -256],[-182, -256],[-135.5, -256],[-94,-256],[-84,-241],[-84,-226],[-84.5,-198],[-84,-244],[-69,-256],[-54, -256], [0, -256], [31, -256], [44, -241], [44, -226], [44, -198], [44, -138],[29, -128],[1,-128],[34, -128],[44, -110], [44,-95], [44.5, -65], [44.5, -65]]
            self.goal_types = [0,4,1,2,3,1,2,3,4,6,8,6,6,6,8,6,6,1,2,3,4,1,2,3,4,1,2,3,4,6,8,6,6,6,8,6,6,6,8,6,1,2,3,1,7]
        elif self.config == 7:
            # Config 7 - Start backwards
            points = [[0,0],[35, 0],[44, -15],[44,-30],[44,-65],[44,-95],[44,-110],[34,-127],[2,-129],[34,-129],[44,-143],[44,-158],[44,-198],[44, -246],[29, -256],[14,-256],[0, -256],[-74,-256],[-84,-241],[-84,-226],[-84.5,-200],[-84,-226],[-84,-241],[-94,-256],[-135.5,-256],[-182,-256],[-197,-256],[-210,-246],[-212,-195],[-212,-158],[-212,-143],[-202,-130],[-137,-128],[-202,-128],[-212,-113],[-212,-98],[-212,-74],[-212,-78],[-212,-63],[-200,-49],[-137,-48],[-183,-48],[-197,-48],[-210,-37],[-212,-30],[-212,-15],[-205,-1],[-180,0.0],[-135,1],[-135,1]]
            self.goal_types = [0,8,9,10,6,6,9,10,6,1,2,3,4,1,2,3,4,1,2,3,4,8,9,10,6,8,9,10,6,8,9,10,6,1,2,3,4,4,2,3,4,8,9,10,8,9,10,6,6,7]
        elif self.config == 8:
            # Config 8 - 7 & end forward
            points = [[0,0],[32, 0],[44, -15],[44,-30],[44,-65],[44,-95],[44,-115],[28,-127],[4.5,-128],[34,-129],[44,-143],[44,-158],[44,-198],[44, -241],[27, -256],[12,-256],[0, -256],[-70,-256],[-84,-241],[-84,-226],[-84.5,-199],[-84,-226],[-84,-241],[-94,-256],[-135.5,-256],[-182,-256],[-197,-256],[-210,-246],[-212,-195],[-212,-158],[-212,-145],[-200,-130],[-142,-128],[-202,-128],[-212,-113],[-212,-98],[-212,-74],[-212,-78],[-212,-63],[-200,-49],[-135,-48],[-94,-48],[-84,-33],[-84,-18],[-84,-13],[-103,0],[-114,0],[-135,1]]
            self.goal_types = [0,8,9,10,6,6,9,10,6,1,2,3,4,1,2,3,4,1,2,3,4,8,9,10,6,8,9,10,6,8,9,10,6,1,2,3,4,4,2,3,4,1,2,3,1,2,3,7]
        elif self.config == 9:
            # Config 9 - 8 & Cheat path
            points = [[0,0],[24,-0.5],[32, -0.5],[44, -20],[44,-35],[44,-65],[44,-95],[44,-113],[25,-127],[0,-128],[15,-128],[33,-129],[44,-143],[44,-158],[44,-198],[44,-230],[44, -241],[27, -256],[12,-256],[0, -256],[-59,-256],[-73,-256],[-84,-241],[-84,-226],[-84.5,-198],[-85,-235],[-84,-244],[-94,-255],[-135.5,-255],[-178,-253],[-196.5,-242.5],[-207,-218],[-211,-198],[-212,-158],[-212,-145],[-200,-130],[-135.5,-128],[-150,-128],[-190,-128],[-203,-128],[-212,-113],[-212,-98],[-212,-74],[-212,-78],[-212,-63],[-199,-49],[-135,-48],[-110,-48],[-93,-48],[-85,-33],[-85,-18],[-85,-13],[-103,0],[-114,0],[-135,1]]
            self.goal_types = [0,6,8,9,10,6,6,9,10,11,1,0,2,3,4,0,1,2,3,4,0,1,2,3,5,8,9,10,6,8,9,10,6,8,9,10,11,1,0,1,2,3,4,4,2,3,4,0,1,2,3,1,2,3,7]
        elif self.config == 10:
            # Config 10 - 9 & Cheat some more
            points = [[0,0],[24,-0.5],[32, -0.5],[44, -20],[44,-35],[44,-65],[44,-95],[44,-113],[25,-127],[0,-128],[15,-128],[33,-129],[44,-143],[44,-158],[44,-198],[44,-230],[44, -241],[27, -256],[12,-256],[0, -256],[-59,-256],[-73,-256],[-84,-241],[-84,-226],[-84.5,-198],[-85,-235],[-91.8,-247.8],[-105,-255.5],[-135.5,-255],[-178,-253],[-196.5,-242.5],[-207,-218],[-211,-198],[-212,-158],[-212,-145],[-200,-130],[-135.5,-128],[-150,-128],[-190,-128],[-203,-128],[-212,-113],[-212,-98],[-212,-74],[-212,-78],[-212,-63],[-199,-49],[-135,-48],[-110,-48],[-93,-48],[-85,-33],[-85,-18],[-85,-13],[-103,0],[-114,0],[-135,1]]
            self.goal_types = [0,6,8,9,10,6,6,9,10,11,1,0,2,3,4,0,1,2,3,4,0,1,2,3,5,8,9,10,6,8,9,10,6,8,9,10,11,1,0,1,2,3,4,4,2,3,4,0,1,2,3,1,2,3,7]

        for i in range(len(points)):
            self.pose_seq.append([])
            self.pose_seq[i].append(points[i][0])
            self.pose_seq[i].append(points[i][1])
            self.pose_seq[i].append(self.goal_types[i])
        goals.x = self.pose_seq[self.goal_cnt][0]
        goals.y = self.pose_seq[self.goal_cnt][1]
        goals.z = self.pose_seq[self.goal_cnt][2]
        # rospy.loginfo("Sending goal pose " + str(self.goal_cnt + 1) + " to Action Server")
        rospy.loginfo("Sending goals achievements")
        self.pub_goal.publish(goals)

    def position(self, msg):

        # This function calculates the distance between the PhysXCar and the current goal point it is moving towards.
        # When it is within a specified radius from the goal point, it moves on to the next goal point
        # by incrementing the goal_cnt
        # The current goal parameters are published in the /goals topic
        if self.goal_cnt < len(self.pose_seq):
            if self.pose_seq[self.goal_cnt][2] in [5,11]: # Smaller radius for 3-point D
                rad = 3
            else:
                rad = 5
            goals = Vector3()
            self.x = msg.pose.pose.position.x
            self.y = msg.pose.pose.position.y
	    self.z = msg.pose.pose.position.z
            diff = math.sqrt((self.x - self.pose_seq[self.goal_cnt][0])**2 + (self.y - self.pose_seq[self.goal_cnt][1])**2 + self.z**2)
            if diff < rad:
                self.goal_cnt += 1
                if self.goal_cnt < len(self.pose_seq):
                    goals.x = self.pose_seq[self.goal_cnt][0]
                    goals.y = self.pose_seq[self.goal_cnt][1]
                    goals.z = self.pose_seq[self.goal_cnt][2]
                    self.pub_goal.publish(goals)
        else:
            return
def listener():
    global msg, costmap, launch
    msg = Odometry
    goal = Goal()
    rospy.init_node("goal_post")
    goal.callback()
    rospy.Subscriber("/odom", Odometry, goal.position)
    rospy.spin()

if __name__ == '__main__':

    listener()
