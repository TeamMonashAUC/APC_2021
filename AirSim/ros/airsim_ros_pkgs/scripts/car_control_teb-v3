#!/usr/bin/env python
import rospy
import roslib
import tf
from std_msgs.msg import String, Int8, Float64
from move_base_msgs.msg import MoveBaseActionGoal
from geometry_msgs.msg import Twist, PoseStamped, PoseArray, Vector3
from nav_msgs.msg import Odometry, Path
import sensor_msgs
import sensor_msgs.msg
import airsim_car_ros_pkgs as air
import airsim_car_ros_pkgs.msg
import math

class Control:
	def __init__(self):
		self.steering = 0
		self.adjusted_z = 0
		self.brake = 0
		self.throttle = 0
		self.gear = "forward"
	def callback(self, msg):
		#pub = rospy.Publisher('/airsim_node/PhysXCar/car_cmd_body_frame', air.msg.CarCmd, queue_size=0)
		#controls=airsim_car_ros_pkgs.msg.CarCmd()
		pub_brake = rospy.Publisher("/brake_command", Float64, queue_size=10)
		pub_gear = rospy.Publisher("/gear_command", String, queue_size=10)
		pub_throttle = rospy.Publisher("/throttle_command", Float64, queue_size=10)
		pub_steering = rospy.Publisher("/steering_command", Float64, queue_size=10)
		self.brake_data = Float64()
		self.gear_data = String()
		self.throttle_data = Float64()
		b_wheel_base= 3
		target_speed = 0
		global case, stop, r_flag, xx, yy, passed
		# Settings:
		# Other .yaml files updated on github
		# controller_frequency: 5.0
		# All other frequencies: 2.0

		### Note ###
		# a) - This script IGNORES linear twist input from /cmd_vel and instead uses hardcoded target velocities for higher efficiency, stability and
		#      continuity (at least until the planner can be tuned better).
		#    - This works as the assumption for the neighborhood environment is there are no dynamic/random obstacles in the middle of the road.
		#    - The centering adjustments also will only work for pure x or y axis straight roads
		#    - Only the angular twist input is considered, and the linear twist input is only taken for recovery behaviours in case of car stuck.
		# b) - This script assumes that you are using goals_teb.py, or at least includes the portion of the code that publishes goal_type which this script uses.
		#	 - The function getType() below describes the different goal types used to represent different states.
		#    - To simplify, the idea is to break down the path to the goal to a few points: i) before ii) during iii) after a corner. The car will travel at
		# 	   high speeds while it is far from point i).
		#    - Currently the car will also run at moderate speeds near goals.
		#    - With the current TEB parameters, there is expected to be inconsistencies and the car may crash.


		# Collision recovery - alternatively just send a goal where the car is on Rviz to trigger self.brake radius
		if msg.linear.x >= 0:
			r_flag = 0
		else:
			r_flag = r_flag + 1
			if r_flag >= 10 and car_speed < 0.1 and goal_type != 5 and goal_type !=6:
				stop = 1

		if case == -1 and goal_type != 6: # Switch back to auto after done reversing
			self.gear = "forward"
			self.brake = 1
			stop = 0



		# Distance between car and goal
		x_diff = goal_x - car_x
		y_diff = goal_y - car_y

		diff_radius = math.sqrt(math.pow(x_diff,2) + math.pow(y_diff,2))

		# Save the desired goal
		if goal_type == 4 and diff_radius < 10:
			xx = goal_x
			yy = goal_y

		goal_diff = math.sqrt(math.pow(xx - car_x,2) + math.pow(yy - car_y,2))

		# Check if car passed within 3m of the goal
		if goal_diff < 3:
			passed = passed + 1
			xx = 0
			yy = 0


		### self.steering control for TEB // Max car steer: 1.0 rad (60 deg) ###
		if car_speed > 0.1:
			if msg.angular.z != 0:

				# Apply Ackermann's self.steering
				r = car_speed/-msg.angular.z
				self.adjusted_z = math.atan(b_wheel_base/r)

				# Reducing steer gain on *fast* straight line path to dampen oscillations
				if (goal_type == 0 or goal_type == 1 or goal_type == 4):
					if (abs(x_diff) < 1 or abs(y_diff)< 1) and ((abs(yaw) < 0.7224 and abs(yaw) > 0.6915) or (abs(yaw) < 0.0218 or abs(yaw) > 0.99976)): # Centered on path (precision of 1m & 2.5 degs)
						if car_speed < 10:
							gain = 0.2
						elif car_speed < 15:
							gain = 0.3
						else:
							gain = 0.4
					else:
						gain = 1
				elif goal_type == 5:
					gain = 1.2
				else:
					gain = 1.05

				self.steering = self.adjusted_z*gain
			#else:
			#	if (abs(loc_y3) > 3 and loc_y3*self.prev_steer < 0): # Correct random 0's
			#		self.steering = self.prev_steer
			c = 5
			if loc_y2 >= 2 and loc_y2 < 7 and goal_type in [0, 1, 3, 4]:
				rospy.loginfo("use local plan to steer left")
				self.steering = -0.42/math.pow(7, 1.25)*math.pow(abs(loc_y2), 1.25)*c/car_speed#-1 / (1*(math.exp(2 * 8.2) - 1)) * 1*(math.exp(
					#2 * loc_y3) - 1) # -1.2/math.exp(3.2)*math.exp(glo_y1)
			elif loc_y2 > -7 and loc_y2 <= -2 and goal_type in [0, 1, 3, 4]:
				rospy.loginfo("use local plan to steer right")
				self.steering = 0.42/math.pow(7, 1.25)*math.pow(abs(loc_y2), 1.25)*c/car_speed#1 / (1*(math.exp(2 * 8.2) - 1)) * 1*(math.exp(
					#2 * -loc_y3) - 1)  # 1.2/math.exp(3.2)*math.exp(-glo_y1)
			if loc_y2 > 3 and loc_y2 < 15 and goal_type in [2]:
				rospy.loginfo("use local plan for corner to steer  left")
				self.steering = -0.75 / math.pow(15, 1.2) * math.pow(abs(loc_y2), 1.2)*c/car_speed
			elif loc_y2 > -15 and loc_y2 < -3 and goal_type in [2]:
				rospy.loginfo("use local plan for corner to steer right")
				self.steering = 0.75 / math.pow(15, 1.2) * math.pow(abs(loc_y2), 1.2)*c/car_speed
			if loc_y2 > 0.2 and loc_y2 < 2 and goal_type in [0, 1, 3, 4]:
				rospy.loginfo("use local plan to slightly steer  left")
				self.steering = -0.28 / math.pow(3, 1.2) * math.pow(abs(loc_y2), 1.2)*c/car_speed
			elif loc_y2 > -2 and loc_y2 < -0.2 and goal_type in [0, 1, 3, 4]:
				rospy.loginfo("use local plan to slightly steer right")
				self.steering = 0.28 / math.pow(3, 1.2) * math.pow(abs(loc_y2), 1.2)*c/car_speed
			if loc_y2 >= 7 and loc_y2 < 15 and goal_type in [0, 1, 3, 4]:
				rospy.loginfo("use local plan to intensively steer left")
				self.steering = -0.72/math.pow(15, 1.2)*math.pow(abs(loc_y2), 1.2)*c/car_speed#-1 / (1*(math.exp(2 * 8.2) - 1)) * 1*(math.exp(
					#2 * loc_y3) - 1) # -1.2/math.exp(3.2)*math.exp(glo_y1)
			elif loc_y2 > -15 and loc_y2 <= -7 and goal_type in [0, 1, 3, 4]:
				rospy.loginfo("use local plan to intensively steer right")
				self.steering = 0.72/math.pow(15, 1.2)*math.pow(abs(loc_y2), 1.2)*c/car_speed#1 / (1*(math.exp(2 * 8.2) - 1)) * 1*(math.exp(
					#2 * -loc_y3) - 1)  # 1.2/math.exp(3.2)*math.exp(-glo_y1)
			if loc_y2 >= 15 and loc_y2 < 25 and goal_type in [0, 1, 3, 4]:
				rospy.loginfo("use local plan to aggressively steer left")
				self.steering = -0.7/math.pow(25, 1.5)*math.pow(abs(loc_y2), 1.5)*c/car_speed#-1 / (1*(math.exp(2 * 8.2) - 1)) * 1*(math.exp(
					#2 * loc_y3) - 1) # -1.2/math.exp(3.2)*math.exp(glo_y1)
			elif loc_y2 > -25 and loc_y2 <= -15 and goal_type in [0, 1, 3, 4]:
				rospy.loginfo("use local plan to aggressively steer right")
				self.steering = 0.7/math.pow(25, 1.5)*math.pow(abs(loc_y2), 1.5)*c/car_speed#1 / (1*(math.exp(2 * 8.2) - 1)) * 1*(math.exp(
					#2 * -loc_y3) - 1)  # 1.2/math.exp(3.2)*math.exp(-glo_y1)
			if loc_y2 < 10 and loc_y2 > 0 and goal_type == 6:
				rospy.loginfo("adjusting reverse")
				self.steering = -0.8/math.pow(10, 1.5)*math.pow(abs(loc_y2), 1.5)*c/car_speed
			elif loc_y2 < 0 and loc_y2 > -10 and goal_type == 6:
				rospy.loginfo("adjusting reverse")
				self.steering = 0.8/math.pow(10, 1.5)*math.pow(abs(loc_y2), 1.5)*c/car_speed
			#if abs(loc_y2) < 0.2 and goal_type in [0, 1, 3, 4]:
			#	self.steering = self.prev_steer

		# Save current self.steering for next loop
		#self.prev_steer = self.steering


		# self.throttle and self.brake control
		if car_speed == 0 and stop == 0: # Start moving
			case =0
			self.throttle = 0.3
			self.brake = 0


		elif diff_radius > 2 and stop == 0: # Outside of goal radius
			if goal_type == 0 or goal_type == 1 or goal_type == 4 or (goal_type == 7 and diff_radius > 20): # Fast straight path

				if (diff_radius > 25 and car_speed < 11) or (diff_radius > 35 and car_speed < 15) or (diff_radius > 45 and car_speed >=15) or goal_type == 0: # Far from goal/turn
					case = 1
					target_speed = 1.1*car_speed + 6
				else:
					case = 2
					target_speed = 10

				if target_speed > 20: # Limit max acceleration
					target_speed = 20

				if goal_type == 4 and diff_radius < 20: # Reduce acceleration for goals
					fct = 0.9
				else:
					fct = 1.3

				if (car_speed < target_speed): # Accelerate
					self.throttle = fct*(target_speed - car_speed)/10
					self.brake = 0
				elif (car_speed > 12 and diff_radius < 25) or (car_speed > 15 and diff_radius < 35): # self.brake if too fast
					self.brake = 0.7*(1-math.exp(-abs(car_speed - target_speed)))
				else:
					self.throttle = fct*abs(target_speed-car_speed)/10
					self.brake = 0

			elif goal_type == 2 or goal_type == 3: # Entering or exiting corner
				if goal_type == 2:
					target_speed = 5.5
				elif car_speed < 3:
					target_speed = 5
				else:
					target_speed = 8
				accel = (target_speed - car_speed)/10
				if accel >=0:
					case = 3
					delay = 0
					self.throttle = 0.2*accel + 0.6
					self.brake = 0

			elif goal_type == 7: # self.brake earlier if too fast
				case = 4
				if car_speed > 10 and diff_radius < 20:
					self.brake = 0.5

			elif goal_type == 5: # 3-point D
				case = 5
				target_speed = 5
				self.throttle = 0.1*(target_speed - car_speed) + 0.3
				self.brake = 0

			elif goal_type == 6: # 3-point reverse, switch to manual
				case = -1
				target_speed = 5
				self.gear = "reverse"
				self.throttle = 0.15*(target_speed - car_speed) + 0.15
				self.brake = 0



		else:  # Full self.brake when radius less than 2 m
			case = 5
			stop = 1
			if goal_type == 7 or goal_type == 2:
				self.brake = 1
				self.throttle = 0
			else:
				self.brake = 1.2/diff_radius
				self.throttle = diff_radius/4
			#self.steering = self.prev_steer

		if self.throttle > 0.1 and case != 0 and car_speed < 0.1 and r_flag > 0 and goal_type != 5 and goal_type != 6: # Car stuck, ignore for 3-p
			stop = 1

		# Ignore negative values and truncate values > 1
		if self.throttle < 0:
			self.throttle = 0
		if self.brake < 0 :
			self.brake = 0

		if self.throttle > 1:
			self.throttle = 1

		if self.brake > 1:
			self.brake = 1

		if abs(self.steering) > 1:
			self.steering = abs(self.steering)/self.steering
		self.brake_data.data = self.brake
		self.gear_data.data = self.gear
		self.throttle_data.data = self.throttle
		pub_brake.publish(self.brake)
		pub_gear.publish(self.gear_data)
		pub_throttle.publish(self.throttle_data)
		pub_steering.publish(self.steering)
		#rospy.loginfo("Publishing: [State: %d,self.throttle:  %f,self.brake: %f,linear_x: %f,target_speed: %d, Speed_cur: %f, angular_z: %f, self.steering: %f,goal_type: %d,y3: %f, x3: %f, x_diff: %f, y_diff: %f,r_flag: %d, passed: %d]" %(case, controls.self.throttle, controls.self.brake,msg.linear.x,target_speed,car_speed,-msg.angular.z,controls.self.steering,goal_type,glo_y3,glo_x3,x_diff, y_diff,r_flag,passed))
		rospy.loginfo("stop: %f, loc_y2: %f, throttle: %f, self.steering: %f, self.adjusted_z: %f, car_speed: %f", stop, loc_y2, self.throttle, self.steering, self.adjusted_z, car_speed)
	def position(self, xyz):
		global car_x, car_y, yaw, car_speed

		# Frame at origin
		car_x = xyz.pose.pose.position.x
		car_y = xyz.pose.pose.position.y

		yaw = math.asin(xyz.pose.pose.orientation.z)*2
		car_speed = math.sqrt(math.pow(xyz.twist.twist.linear.x,2) + math.pow(xyz.twist.twist.linear.y,2))


	def goalcall(self, dest):
		global goal_x, goal_y, stop

		stop = 0 # Global flag that causes the car to move when a new goal is set
		goal_x = dest.goal.target_pose.pose.position.x
		goal_y = dest.goal.target_pose.pose.position.y

	def getType(self, type):
		global goal_type

		# Goal Type:
		# 0 - Intermediate (arbitrary point in a straight road)
		# 1 - Road End (before corner)
		# 2 - Corner
		# 3 - Exit Corner
		# 4 - Goal
		# 5 - 3-point D
		# 6 - 3-point R
		# 7 - Stop at goal
		goal_type = type.data


	# TEB local path
	def localPlan(self, path):
		global loc_y0, loc_y1, loc_y2, loc_y3

		sizePose = len(path.poses)

		loc_y0 = path.poses[0].position.y
		loc_y1 = path.poses[1].position.y
		loc_y2 = path.poses[sizePose - 2].position.y
		loc_y3 = path.poses[sizePose - 1].position.y

	# Global Planner path
	def globPlan(self, path):
		global glo_y0, glo_y1, glo_y2, glo_y3, glo_x3, glo_y0_corr, glo_y1_corr, glo_y2_corr

		sizePose = len(path.poses)
		third3 = int(math.floor(sizePose/3))
		third = int(math.floor(third3/3))
		third2 = int(math.floor(2*third3/3))

		glo_y0 = path.poses[0].pose.position.y
		glo_y1 = path.poses[third].pose.position.y
		glo_y2 = path.poses[third2].pose.position.y
		glo_y3 = path.poses[third3].pose.position.y
		glo_x0 = path.poses[0].pose.position.x
		glo_x1 = path.poses[third].pose.position.x
		glo_x2 = path.poses[third2].pose.position.x
		glo_y0_corr = -glo_x0 * math.sin(yaw-math.pi/2) + glo_y0 * math.cos(yaw-math.pi/2) - car_y
		glo_y1_corr = -glo_x1 * math.sin(yaw-math.pi/2) + glo_y1 * math.cos(yaw-math.pi/2) - car_y
		glo_y2_corr = -glo_x2 * math.sin(yaw-math.pi/2) + glo_y2 * math.cos(yaw-math.pi/2) - car_y
		glo_x3 = path.poses[sizePose - 1].pose.position.x


def listener():
	global msg, car_x, car_y, car_speed, goal_x, goal_y, loc_y0, loc_y1, loc_y2, loc_y3, glo_y0, glo_y1, glo_y2, glo_y3, glo_x3, stop, yaw, r_flag, goal_type, xx, yy, passed
	control = Control()
	rospy.init_node('cmdvel_listener', anonymous=True)
	msg = Twist
	rospy.Subscriber("/odom", Odometry, control.position) # Get car position
	rospy.Subscriber("/move_base/TebLocalPlannerROS/teb_poses", PoseArray, control.localPlan) # Get local planner's global plan
	rospy.Subscriber("/move_base/GlobalPlanner/plan", Path, control.globPlan) # Get local planner's global plan
	rospy.Subscriber("/move_base/goal", MoveBaseActionGoal, control.goalcall) # Get goal
	rospy.Subscriber("/goal_type", Int8, control.getType) # Get goal type
	rospy.Subscriber("/cmd_vel", Twist, control.callback)
	rospy.spin()

if __name__ == '__main__':

		case = 0
		prev_z = 0
		goal_x = 0
		goal_y = 0
		glo_y0 = 0
		glo_x0 = 0
		glo_y1 = 0
		glo_y2 = 0
		glo_y3 = 0
		glo_x3 = 0
		glo_y0_corr = 0
		glo_y1_corr = 0
		glo_y2_corr = 0
		off_x = 0
		off_y = 0
		offd_z = 0
		stop = 1
		take = 0
		delay = 0
		r_flag = 0
		goal_type = 0
		xx = -100
		yy = -100
		passed = 0


		listener()
