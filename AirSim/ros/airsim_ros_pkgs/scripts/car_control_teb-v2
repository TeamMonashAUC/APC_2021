#!/usr/bin/env python
import rospy
import roslib
import tf
from std_msgs.msg import String, Int8, Float64, Int32
from std_srvs.srv import Empty
from move_base_msgs.msg import MoveBaseActionGoal
from geometry_msgs.msg import Twist, PoseStamped, PoseArray, Vector3
from nav_msgs.msg import Odometry, Path
import sensor_msgs
import sensor_msgs.msg
import math

class Control:
	def __init__(self):
		self.steering = 0
		self.adjusted_z = 0
		self.brake = 0
		self.throttle = 0
		self.gear = "forward"
		self.brake_data = Float64()
		self.gear_data = String()
		self.throttle_data = Float64()
		self.steering_data = Float64()
	def callback(self, msg):
		# Define and initialize variables
		global case, stop, r_flag, duration
		self.steering = 0
		self.adjusted_z = 0
		self.brake = 0
		self.throttle = 0
		z_state = ""
		target_speed = 0
		a = 0
		locOn = 0
		pub_brake = rospy.Publisher("/brake_command", Float64, queue_size=10)
		pub_gear = rospy.Publisher("/gear_command", String, queue_size=10)
		pub_throttle = rospy.Publisher("/throttle_command", Float64, queue_size=10)
		pub_steering = rospy.Publisher("/steering_command", Float64, queue_size=10)

		# Constants
		b_wheel_base = 3 # Wheelbase length [m]
		# mass = 2176.46 # Car mass [kg]
		# g = 9.81 # Gravitational constant [m/s^2]
		# friction = 0.01 # Rolling friction coefficient
		# rho = 1.2 # Air density at NTP [kg/m^3]
		# drag_coeff = 0.357 # Drag coefficient
		# area = 3.389 # Car front chassis area [m^2]

		# Parameters for cornering algorithm and target velocities
		useLoc = 1 # 0 to use goal offset correction, 1 to use local plan correction for cornering
		vmax = 25 # Top Speed at Straights
		vslow = 12 # Top speed when slowing down at straights before corners
		vc_atk = 6 # Cornering attack velocity
		vc_ext1 = [8,6] # Cornering exit velocity, vc_ext1[0] @ car_speed < vc_ext1[1] *Set vc_ext1[1] to 0 to ignore vc_ext1 completely
		vc_ext2 = 10 # Cornering exit velocity @ car_speed > vc_ext1[1], or if vc_ext1[1] == 0 then this is the exit velocity at all speeds
		v3pD = 5 # 3p-D velocity
		v3pR = 5 # 3p-R velocity
		uturn = 1 # Only for final log for recording purposes, doesnt affect code.


		### Note ###
		# a) - This script IGNORES linear twist input from /cmd_vel and instead uses hardcoded target velocities for higher efficiency, stability and
		#      continuity (at least until the planner can be tuned better).
		#    - This works as the assumption for the neighborhood environment is there are no dynamic/random obstacles in the middle of the road.
		#    - The centering adjustments also will only work for pure x or y axis straight roads
		#    - Only the angular twist input is considered, and the linear twist input is only taken for recovery behaviours in case of car stuck.
		# b) - This script assumes that you are using goals_teb.py, or at least includes the portion of the code that publishes goal_type which this script uses.
		#	 - The function getType() below describes the different goal types used to represent different states.
		#    - To simplify, the idea is to break down the path to the goal to a few points: i) before ii) during iii) after a corner. The car will travel at
		# 	   high speeds while it is far from point i).
		#    - Currently the car will also run at moderate speeds near goals.
		#    - With the current TEB parameters, there is expected to be inconsistencies and the car may crash.

		# if t0 == 0:
		# 	t0 = rospy.get_time()
		if goal_type == 7 and stop == 1: # Exit control when reached goal
			rospy.loginfo("Process ended for car_control with params --- cornering: %d, vmax: %d, vslow: %d, vc_atk: %d, vc_ext1: %d @ < %d, vc_ext2: %d, v3pD: %d, v3pR: %d, uturn: %d" %(useLoc,vmax,vslow,vc_atk,vc_ext1[0],vc_ext1[1],vc_ext2,v3pD,v3pR,1))
			rospy.signal_shutdown("Terminate car_control")
			return
		# else:
		# 	t = rospy.get_time()
		# 	dt = t - t0
		# 	duration = duration + dt
		# 	t0 = t

		if case == -1 and goal_type != 6: # Switch back to auto after done reversing
			self.gear = "forward"
			self.brake = 1
			stop = 0
		### self.steering control for TEB // Max car steer: 1.0 rad (60 deg) ###
		if car_speed > 0.1:

			a = math.atan(g_dy / g_dx)  # alpha
			if g_dx < 0 and goal_type != 6:
				a = -a
			if useLoc == 1: # Calculate using local correction
				c = 6
				if loc_y2 > 3 and loc_y2 < 15 and goal_type in [2]:
					z_state = "Local Cornering"
					self.steering = -0.75 / math.pow(15, 1.2) * math.pow(abs(loc_y2), 1.2)*c/car_speed
					locOn = 1
				elif loc_y2 > -15 and loc_y2 < -3 and goal_type in [2]:
					z_state = "Local Cornering"
					self.steering = 0.75 / math.pow(15, 1.2) * math.pow(abs(loc_y2), 1.2)*c/car_speed
					locOn = 1

			if locOn == 0: # Dont do extra calculation if steering is already calculated by local correction
				# Steering adjustments
				if (goal_type != 5 and goal_type != 6 and goal_type != 2):  # Straights
					if goal_type == 3:
						gain = 0.8 * math.pow(car_speed / 10, 2) + 0.6
					elif car_speed > 10:
						gain = 1.3
					else:
						gain = 1

					c = 1.7  # Differential gain
					fct_z = c * math.exp(-abs(a)) + 0.7  # Differential constant for alpha
					msg.angular.z = fct_z * a
					z_state = "Centering"

				else:  # Corners and 3-p
					gain = 1
					z_state = "Cornering"
					fct_z = 1.5  # Scalar constant
					if abs(a) > math.radians(45) and diff_radius < 15:  # Understeer
						z_state = "Understeer Correction"
						msg.angular.z = fct_z * a
					elif (abs(a) < math.radians(15) and abs(msg.angular.z) > 0.3) or a * msg.angular.z < 0:  # Oversteer
						z_state = "Oversteer Correction"
						msg.angular.z = fct_z * a
					elif msg.angular.z == 0:  # Correct random 0's
						z_state = "Zero Correction"
						msg.angular.z = fct_z * a

				if msg.angular.z != 0:
					# Apply Ackermann's steering
					r = car_speed / -msg.angular.z
					adjusted_z = math.atan(b_wheel_base / r)
					self.steering = adjusted_z * gain


		# self.throttle and self.brake control
		if car_speed == 0 and stop == 0:  # Start moving
			case = 0
			self.throttle = 0.5

		elif diff_radius > 1 and stop == 0:  # Outside of goal radius
			if goal_type in [0,1,4] or (goal_type == 7 and diff_radius > 18):  # Fast straight path
				if (diff_radius > 25 and car_speed < 11) or (diff_radius > 35 and car_speed < 15) or (
						diff_radius > 45 and car_speed < 21) or (
						diff_radius > 55 and car_speed >= 21) or goal_type == 0 or goal_type == 4:  # Far from goal/turn
					case = 1
					target_speed = 1.1 * car_speed + 6
				else:
					case = 2
					target_speed = vslow

				if target_speed > vmax:  # Limit max acceleration
					target_speed = vmax

				fct = 1.3  # Acceleration gain

				if (car_speed < target_speed):  # Accelerate
					self.throttle = fct * (target_speed - car_speed) / 10

				elif goal_type != 4 and goal_type != 0 and (
						(car_speed > 12 and diff_radius < 25) or (car_speed > 15 and diff_radius < 35) or (
						car_speed > 21 and diff_radius < 45)):  # brake if too fast
					self.brake = 0.3 * (car_speed - target_speed)

			elif goal_type in [2,3]:  # Entering or exiting corner
				if goal_type == 2:
					target_speed = vc_atk
				elif car_speed < vc_ext1[1]:
					target_speed = vc_ext1[0]
				else:
					target_speed = vc_ext2
				accel = (target_speed - car_speed) / 10
				if accel >= 0:
					case = 3
					delay = 0
					self.throttle = 0.2 * accel + 0.6

			elif goal_type == 7:  # brake earlier if too fast
				case = 4
				if car_speed > 10:
					self.brake = 0.5

			elif goal_type == 5:  # 3-point D
				case = 5
				target_speed = v3pD
				self.throttle = 0.1 * (target_speed - car_speed) + 0.3

			elif goal_type == 6:  # 3-point reverse, switch to manual
				case = -1
				target_speed = v3pR
				self.steering = -self.steering  ### Comment this out if allow_init_with_backwards_motion is set to False
				self.gear = "reverse"
				self.throttle = 0.15 * (target_speed - car_speed) + 0.15



		else:  # Full brake when radius less than 2 m
			case = 5
			stop = 1
			self.brake = 1

		# Ignore negative values and truncate values > 1
		if self.throttle < 0:
			self.throttle = 0

		if self.brake < 0:
			self.brake = 0

		if self.throttle > 1:
			self.throttle = 1

		if self.brake > 1:
			self.brake = 1

		if abs(self.steering) > 1:
			self.steering = abs(self.steering) / self.steering

		# f_r = mass*g*friction # Road force
		# f_d = 0.5*rho*drag_coeff*area*math.pow(car_speed,2) # Drag force
		# f_i = mass*self.throttle # Inertial force
		#
		# dv = car_speed-prev_v
		# f_i2 = mass*abs(dv/dt)
		#
		# # Calculate Energy usage
		# f_tot = f_r + f_d + f_i # Total force
		# energy = energy + f_tot*car_speed*dt
		# prev_v = car_speed

		# Publish controls
		self.brake_data.data = self.brake
		self.gear_data.data = self.gear
		self.throttle_data.data = self.throttle
		self.steering_data.data = -self.steering
		pub_brake.publish(self.brake_data)
		pub_gear.publish(self.gear_data)
		pub_throttle.publish(self.throttle_data)
		pub_steering.publish(self.steering_data)
		rospy.loginfo("Status: [x (m): %f, y (m): %f, yaw (q): %f, dist_T (m): %f, time_E (s): %f, Energy (J): %d]" % (car_x, car_y, yaw, distance, duration, math.ceil(energy)))
		rospy.loginfo("Publishing: [D_state: %d, Z_state: %s, Throttle:  %f, Brake: %f, target_speed: %d, Speed_cur: %f, angular_z: %f, a: %f, steer: %f, goal_type: %d, g_dx: %f, g_dy: %f, diff_radius: %f, passed: %d, f_loops: %d]" %(case, z_state, self.throttle, self.brake,target_speed,car_speed,msg.angular.z,a,self.steering,goal_type,g_dx,g_dy,diff_radius,passed, fail))


	def position(self, xyz):
		global car_x, car_y, yaw, car_speed, g_dx, g_dy, xx, yy, passed, tick, diff_radius, prev_x, prev_y, distance, energy, prev_v, t0, duration

		# Get car position, velocity and orientation
		car_x = xyz.pose.pose.position.x
		car_y = xyz.pose.pose.position.y
		yaw = xyz.pose.pose.orientation.z
		car_speed = math.sqrt(math.pow(xyz.twist.twist.linear.x, 2) + math.pow(xyz.twist.twist.linear.y, 2) + math.pow(xyz.twist.twist.linear.z, 2))

		# Calculate distance travelled and save previous coordinates
		dd = math.sqrt(math.pow(car_x - prev_x, 2) + math.pow(car_y - prev_y, 2))
		distance = distance + dd
		prev_x = car_x
		prev_y = car_y

		if goal_type !=8: # Dont calculate until first goal is received
			# Calculate time elapsed
			if t0 == 0:
				t0 = rospy.get_time()
			t = rospy.get_time()
			dt = t - t0
			duration = duration + dt
			t0 = t

			# Force Calculation
			f_r = mass*g*friction # Road force
			f_d = 0.5*rho*drag_coeff*area*math.pow(car_speed,2) # Drag force

			# d2v = math.pow(car_speed,2)-math.pow(prev_v,2)
			# if dd == 0 or d2v <= 0:
			# 	accel = 0
			# else:
			# 	accel = 0.5*d2v/dd
			dv = car_speed - prev_v
			f_i = mass*abs(dv)/dt # Inertial force

			# Calculate Energy usage
			f_tot = f_r + f_d + f_i # Total force
			energy = energy + f_tot*dd
		prev_v = car_speed

		# Transform goal coordinates using forward kinematics
		z = 2 * math.asin(yaw) + math.radians(90)  # theta
		rot = [[math.cos(z), -math.sin(z)], [math.sin(z), math.cos(z)]]  # rotation matrix
		g_dx = -(rot[0][0] * (goal_x - car_x) + rot[0][1] * (goal_y - car_y))
		g_dy = -(rot[1][0] * (goal_x - car_x) + rot[1][1] * (goal_y - car_y))

		x_diff = goal_x - car_x
		y_diff = goal_y - car_y

		# Calculate distance from car to goal
		diff_radius = math.sqrt(math.pow(x_diff,2) + math.pow(y_diff,2))

		# Save the TRUE goal
		if (goal_type == 4 or goal_type == 7) and diff_radius < 10:
			xx = goal_x
			yy = goal_y

		goal_diff = math.sqrt(math.pow(xx - car_x, 2) + math.pow(yy - car_y, 2))

		if tick > 0 and tick < 30:  # Latch
			tick = tick + 1
		elif tick == 30:
			tick = 0

		# Check if car passed within 3m of the TRUE goal
		if goal_diff < 3 and stop == 0 and tick == 0:
			passed = passed + 1
			tick = tick + 1
			xx = 0
			yy = 0

	def goalcall(self, dest):
		global goal_x, goal_y, stop

		stop = 0 # Global flag that causes the car to move when a new goal is set
		goal_x = dest.goal.target_pose.pose.position.x
		goal_y = dest.goal.target_pose.pose.position.y

	def getType(self, type):
		global goal_type

		# Goal Type:
		# 0 - Intermediate (arbitrary point in a straight road)
		# 1 - Road End (before corner)
		# 2 - Corner
		# 3 - Exit Corner
		# 4 - Goal
		# 5 - 3-point D
		# 6 - 3-point R
		# 7 - Stop at goal
		goal_type = type.data

	def collision_count(self, cnt):
		global col_cnt
		col = cnt.data

		if col > 0: # For testing, the count will always increase if the car collided at least once in an AirSim session. To reset have to stop and play again
			col_cnt = 1


	# TEB local path
	def localPlan(self, path):
		global loc_y0, loc_y1, loc_y2, loc_y3

		sizePose = len(path.poses)
		loc_y2 = path.poses[sizePose - 2].position.y

	# Global Planner path
	def globPlan(self, path):
		global r, fail

		sizePose = len(path.poses)
		if goal_type == 5:
			r = 1
		elif goal_type !=3 and r == 1:
			r = 2

		# Clear costmap if move_base fails to get a plan, or after a reverse
		if sizePose == 0 or r == 2:
			r = 0
			fail = fail + 1 # Record no. of fails
			clear_map = rospy.ServiceProxy('/move_base/clear_costmaps',Empty)
			clear_map()
			return


def listener():
	global msg, car_x, car_y, yaw, car_speed, goal_x, goal_y, loc_y2, stop, r_flag, goal_type, xx, yy, passed, fail, distance, col_cnt, diff, energy, brk, duration
	control = Control()
	rospy.init_node('cmdvel_listener', anonymous=True, disable_signals=True)
	msg = Twist
	rospy.Subscriber("/odom", Odometry, control.position) # Get car position
	rospy.Subscriber("/move_base/TebLocalPlannerROS/teb_poses", PoseArray, control.localPlan) # Get local planner's local plan
	rospy.Subscriber("/move_base/GlobalPlanner/plan", Path, control.globPlan) # Get global plan
	rospy.Subscriber("/move_base/goal", MoveBaseActionGoal, control.goalcall) # Get goal
	rospy.Subscriber("/airsim_node/PhysXCar/collision_count", Int32, control.collision_count)
	rospy.Subscriber("/goal_type", Int8, control.getType) # Get goal type
	rospy.Subscriber("/cmd_vel", Twist, control.callback)
	rospy.spin()

if __name__ == '__main__':
	case = 0
	prev_steer = 0
	goal_x = -5
	goal_y = 0
	car_x = 0
	car_y = 0
	yaw = 0
	loc_y2 = 0
	stop = 0
	goal_type = 8
	xx = -100
	yy = -100
	passed = 0
	fail = 0
	tick = 0
	r = 0
	distance = 0
	prev_x = 0
	prev_y = 0
	t0 = 0
	duration = 0
	energy = 0
	col_cnt = 0
	prev_v = 0
	mass = 2176.46 # Car mass [kg]
	g = 9.81 # Gravitational constant [m/s^2]
	friction = 0.01 # Rolling friction coefficient
	rho = 1.2 # Air density at NTP [kg/m^3]
	drag_coeff = 0.357 # Drag coefficient
	area = 3.389 # Car front chassis area [m^2]

	listener()
